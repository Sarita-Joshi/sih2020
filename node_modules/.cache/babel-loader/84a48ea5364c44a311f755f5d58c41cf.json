{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sarita\\\\react-firebase-authentication-starter-kit\\\\src\\\\components\\\\Speech\\\\index.js\";\nimport React, { Component } from 'react';\nimport * as ROUTES from '../../constants/routes';\nimport './index.css';\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = 'en-US';\n\nclass Speech extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listening: false\n    };\n    this.toggleListen = this.toggleListen.bind(this);\n    this.handleListen = this.handleListen.bind(this);\n    this.callAPI = this.callAPI.bind(this);\n  }\n\n  callAPI() {\n    fetch('http://localhost:9000/name?data=' + document.getElementById('finaltext').value).then(res => res.json()).then(res => this.setState({\n      apiResponse: res\n    }));\n    this.props.history.push({\n      pathname: ROUTES.PRESCRIPTION,\n      PatientName: this.apiResponse.PatientName,\n      Age: this.apiResponse.PatientName,\n      Symptoms: this.apiResponse.PatientName,\n      Diagnosis: this.apiResponse.PatientName,\n      Medicines: this.apiResponse.PatientName,\n      Advice: this.apiResponse.PatientName,\n      Recommendations: this.apiResponse.PatientName\n    });\n  }\n\n  toggleListen() {\n    this.state.listening = !this.state.listening;\n    this.handleListen();\n  }\n\n  handleListen() {\n    if (this.state.listening) {\n      document.getElementById('microphone-btn').value = \"stop\";\n      recognition.start();\n    } else {\n      document.getElementById('microphone-btn').value = \"record\";\n      recognition.stop();\n    }\n\n    let finalTranscript = '';\n\n    recognition.onresult = event => {\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';else interimTranscript += transcript;\n      }\n\n      if (interimTranscript.length <= 1) {\n        document.getElementById('interim').innerHTML = \"!\";\n      } else {\n        document.getElementById('interim').innerHTML = interimTranscript;\n      }\n\n      document.getElementById('finaltext').value = finalTranscript;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"microphone-btn\",\n      className: \"btn btn-primary btn-block btn-lg\",\n      onClick: this.toggleListen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Record\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 125\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"recognize-btn\",\n      className: \"btn btn-primary btn-block btn-lg\",\n      onClick: this.callAPI,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Recognize\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"interim\",\n      color: \"gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"finaltext\",\n      className: \"form-control\",\n      placeholder: \"transcript\",\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Speech;","map":{"version":3,"sources":["C:/Users/Sarita/react-firebase-authentication-starter-kit/src/components/Speech/index.js"],"names":["React","Component","ROUTES","SpeechRecognition","window","webkitSpeechRecognition","recognition","continous","interimResults","lang","Speech","constructor","props","state","listening","toggleListen","bind","handleListen","callAPI","fetch","document","getElementById","value","then","res","json","setState","apiResponse","history","push","pathname","PRESCRIPTION","PatientName","Age","Symptoms","Diagnosis","Medicines","Advice","Recommendations","start","stop","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","innerHTML","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,aAAP;AACA,MAAMC,iBAAiB,GAAGC,MAAM,CAACD,iBAAP,IAA4BC,MAAM,CAACC,uBAA7D;AACA,MAAMC,WAAW,GAAG,IAAIH,iBAAJ,EAApB;AAEAG,WAAW,CAACC,SAAZ,GAAwB,IAAxB;AACAD,WAAW,CAACE,cAAZ,GAA6B,IAA7B;AACAF,WAAW,CAACG,IAAZ,GAAmB,OAAnB;;AAGA,MAAMC,MAAN,SAAqBT,SAArB,CAA+B;AAE7BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE;AADA,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,OAAL,GAAe,KAAKA,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDE,EAAAA,OAAO,GAAE;AACPC,IAAAA,KAAK,CAAC,qCAAqCC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAA3E,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMC,GAAG,IAAI,KAAKE,QAAL,CAAc;AAACC,MAAAA,WAAW,EAAGH;AAAf,KAAd,CAFb;AAIA,SAAKZ,KAAL,CAAWgB,OAAX,CAAmBC,IAAnB,CAAwB;AACtBC,MAAAA,QAAQ,EAAE5B,MAAM,CAAC6B,YADK;AAEtBC,MAAAA,WAAW,EAAE,KAAKL,WAAL,CAAiBK,WAFR;AAGtBC,MAAAA,GAAG,EAAE,KAAKN,WAAL,CAAiBK,WAHA;AAItBE,MAAAA,QAAQ,EAAE,KAAKP,WAAL,CAAiBK,WAJL;AAKtBG,MAAAA,SAAS,EAAE,KAAKR,WAAL,CAAiBK,WALN;AAMtBI,MAAAA,SAAS,EAAE,KAAKT,WAAL,CAAiBK,WANN;AAOtBK,MAAAA,MAAM,EAAE,KAAKV,WAAL,CAAiBK,WAPH;AAQtBM,MAAAA,eAAe,EAAE,KAAKX,WAAL,CAAiBK;AARZ,KAAxB;AAUD;;AAEDjB,EAAAA,YAAY,GAAG;AACb,SAAKF,KAAL,CAAWC,SAAX,GAAuB,CAAC,KAAKD,KAAL,CAAWC,SAAnC;AACC,SAAKG,YAAL;AACF;;AAEDA,EAAAA,YAAY,GAAE;AACZ,QAAI,KAAKJ,KAAL,CAAWC,SAAf,EAA0B;AACxBM,MAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,KAA1C,GAAkD,MAAlD;AACAhB,MAAAA,WAAW,CAACiC,KAAZ;AACD,KAHD,MAGO;AACLnB,MAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,KAA1C,GAAkD,QAAlD;AACAhB,MAAAA,WAAW,CAACkC,IAAZ;AACD;;AAED,QAAIC,eAAe,GAAG,EAAtB;;AACAnC,IAAAA,WAAW,CAACoC,QAAZ,GAAuBC,KAAK,IAAI;AAC9B,UAAIC,iBAAiB,GAAG,EAAxB;;AAEA,WAAK,IAAIC,CAAC,GAAGF,KAAK,CAACG,WAAnB,EAAgCD,CAAC,GAAGF,KAAK,CAACI,OAAN,CAAcC,MAAlD,EAA0DH,CAAC,EAA3D,EAA+D;AAC7D,cAAMI,UAAU,GAAGN,KAAK,CAACI,OAAN,CAAcF,CAAd,EAAiB,CAAjB,EAAoBI,UAAvC;AACA,YAAIN,KAAK,CAACI,OAAN,CAAcF,CAAd,EAAiBK,OAArB,EAA8BT,eAAe,IAAIQ,UAAU,GAAG,GAAhC,CAA9B,KACKL,iBAAiB,IAAIK,UAArB;AACN;;AACD,UAAGL,iBAAiB,CAACI,MAAlB,IAA0B,CAA7B,EAA+B;AAC7B5B,QAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmC8B,SAAnC,GAA+C,GAA/C;AACD,OAFD,MAEK;AACH/B,QAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmC8B,SAAnC,GAA+CP,iBAA/C;AACD;;AAEDxB,MAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,GAA6CmB,eAA7C;AAGH,KAjBC;AAkBH;;AAECW,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,EAAE,EAAC,gBAAX;AAA4B,MAAA,SAAS,EAAC,kCAAtC;AAAyE,MAAA,OAAO,EAAE,KAAKrC,YAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eACsH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADtH,eAEE;AAAQ,MAAA,EAAE,EAAC,eAAX;AAA2B,MAAA,SAAS,EAAC,kCAArC;AAAwE,MAAA,OAAO,EAAE,KAAKG,OAAtF;AAA+F,MAAA,IAAI,EAAC,QAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,KAAK,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE;AAAU,MAAA,EAAE,EAAC,WAAb;AAAyB,MAAA,SAAS,EAAC,cAAnC;AAAkD,MAAA,WAAW,EAAC,YAA9D;AAA2E,MAAA,KAAK,EAAC,OAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAQD;;AAzE4B;;AA4E/B,eAAeR,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport * as ROUTES from '../../constants/routes';\r\nimport './index.css';\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\n\r\nrecognition.continous = true\r\nrecognition.interimResults = true\r\nrecognition.lang = 'en-US'\r\n\r\n\r\nclass Speech extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listening: false\r\n    }\r\n    this.toggleListen = this.toggleListen.bind(this)\r\n    this.handleListen = this.handleListen.bind(this)\r\n    this.callAPI = this.callAPI.bind(this)\r\n  }\r\n  \r\n  callAPI(){\r\n    fetch('http://localhost:9000/name?data=' + document.getElementById('finaltext').value)\r\n    .then(res => res.json())\r\n    .then(res => this.setState({apiResponse : res}));\r\n\r\n    this.props.history.push({\r\n      pathname: ROUTES.PRESCRIPTION,\r\n      PatientName: this.apiResponse.PatientName,\r\n      Age: this.apiResponse.PatientName,\r\n      Symptoms: this.apiResponse.PatientName,\r\n      Diagnosis: this.apiResponse.PatientName,\r\n      Medicines: this.apiResponse.PatientName,\r\n      Advice: this.apiResponse.PatientName,\r\n      Recommendations: this.apiResponse.PatientName,\r\n    })  \r\n  }\r\n\r\n  toggleListen() {\r\n    this.state.listening = !this.state.listening;\r\n     this.handleListen();\r\n  }\r\n  \r\n  handleListen(){ \r\n    if (this.state.listening) {\r\n      document.getElementById('microphone-btn').value = \"stop\";\r\n      recognition.start()\r\n    } else {\r\n      document.getElementById('microphone-btn').value = \"record\";\r\n      recognition.stop()      \r\n    }\r\n\r\n    let finalTranscript = ''\r\n    recognition.onresult = event => {\r\n      let interimTranscript = ''\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';\r\n        else interimTranscript += transcript;\r\n      }\r\n      if(interimTranscript.length<=1){\r\n        document.getElementById('interim').innerHTML = \"!\"  \r\n      }else{\r\n        document.getElementById('interim').innerHTML = interimTranscript\r\n      }\r\n\r\n      document.getElementById('finaltext').value = finalTranscript\r\n\r\n\r\n  }\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrap\">\r\n        <button id=\"microphone-btn\" className=\"btn btn-primary btn-block btn-lg\" onClick={this.toggleListen}>Record</button><br/>\r\n        <button id=\"recognize-btn\" className=\"btn btn-primary btn-block btn-lg\" onClick={this.callAPI} type=\"submit\">Recognize</button>\r\n        <div id=\"interim\" color='gray'></div>\r\n        <textarea id=\"finaltext\" className=\"form-control\" placeholder=\"transcript\" color='black'/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Speech;"]},"metadata":{},"sourceType":"module"}